let e={value:0,height:5,autoIncrement:!0,fakeMode:!1,fadeIn:!0,incrementValue:1,incrementDelay:100,transitionDelay:500,transitionType:"ease",endDelay:250,removeDelay:2e3,loadingBarClass:"loading-bar",backgroundColor:"#ddd",color:"#2047b4",enableShadow:!1,shadowOptions:"0 -8px 8px 5px",spinBar:!0,spinBarColor:"#18a",enableProgress:!1,onStart:()=>{},onDOMLoaded:()=>{},onEnd:()=>{}};class t{static start(a={}){e={...e,...a},this.progress=e.value,this.loadingBar&&this.reset();const s=document.createElement("div"),i=document.createElement("div"),n=document.createElement("style");if(s.className=e.loadingBarClass,s.appendChild(i),s.classList.add("loading"),i.className="innerbar",e.fadeIn&&s.classList.add("off"),e.enableShadow&&i.classList.add("shadow"),e.autoIncrement&&!e.fakeMode&&(e.onDOMLoaded=()=>t.go(50),e.onEnd=()=>t.done()),e.fakeMode&&(e.autoIncrement=!1),e.enableProgress){const e=document.createElement("div");e.className="number",e.textContent="0%",i.appendChild(e),this.numberProgress=e}if(e.spinBar){const e=document.createElement("div");e.className="spinbar",s.appendChild(e)}n.textContent=` .${e.loadingBarClass}.off ~ * { opacity: 0; pointer-events: none; transition: none; } .${e.loadingBarClass} ~ * { opacity: 1; transition: opacity 0.5s ease 0.5s; } .${e.loadingBarClass} { position: fixed; left: 0; top: 0; width: 100%; height: ${e.height}px; background: ${e.backgroundColor}; z-index: 999; opacity: 1; transition: top 1s ease 1s; will-change: top; } .${e.loadingBarClass} .innerbar { width: 0%; height: 100%; background: ${e.color}; opacity: 1; transition: width ${e.incrementDelay+e.transitionDelay}ms ${e.transitionType}; will-change: width; } .${e.loadingBarClass} .innerbar.shadow { box-shadow: ${e.shadowOptions} ${e.color}; } .${e.loadingBarClass} .innerbar.smooth { transition: width ${e.endDelay}ms ease; } .number { position: fixed; top: ${e.height+40}px; right: 10px; font-family: sans-serif; font-size: 14px; border-radius: 20px; color: ${e.spinBarColor}; opacity: 0; transition: opacity 0.5s ease; } .spinbar { position: fixed; top: ${e.height+10}px; right: 15px; width: 15px; height: 15px; border-radius: 50%; border: 4px solid ${e.spinBarColor}; clip-path: polygon(0 0, 50% 0, 50% 100%, 0 100%); z-index: 999; animation: spin 0.5s linear infinite; opacity: 0; } .loading .spinbar, .loading .number { opacity: 1; } @keyframes spin { 0% { transform: rotate(0); } 100% { transform: rotate(360deg); } } `,document.head.appendChild(n),document.body.insertAdjacentElement("afterbegin",s),e.onStart(),e.autoIncrement&&(this.timer=setInterval(()=>this.go(this.progress+=e.incrementValue),e.incrementDelay)),e.fakeMode&&(this.timer=setInterval(()=>{const e=~~(3*Math.random());this.go(this.progress+=e)},e.incrementDelay));document.addEventListener("DOMContentLoaded",()=>e.onDOMLoaded()),window.addEventListener("load",()=>{e.autoIncrement&&(i.classList.add("smooth"),this.done())}),this.loadingBar=s,this.innerBar=i,this.styles=n}static go(e){this.progress=Math.min(~~e,100),this.innerBar.style.setProperty("width",`${this.progress}%`),this.numberProgress&&(this.numberProgress.textContent=`${this.progress}%`),e>99&&this.ends()}static ends(){setTimeout(()=>e.onEnd(),e.endDelay),clearInterval(this.timer),setTimeout(()=>{this.hideBar(),this.fadeIn(),this.loadingBar.classList.remove("loading")},e.endDelay),this.destroyTimer=setTimeout(()=>this.destroy(),e.removeDelay)}static done(){this.go(100),this.ends()}static hideBar(){this.loadingBar.style.setProperty("top",`${-1*(e.height+6)}px`)}static reset(){this.timer&&clearInterval(this.timer),this.destroyTimer&&clearTimeout(this.destroyTimer),this.destroy()}static destroy(){this.styles.remove(),this.loadingBar.remove()}static fadeIn(){this.loadingBar.classList.remove("off")}}export default t;
